<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:context="http://www.springframework.org/schema/context"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<context:component-scan base-package="com.momohelp" />

	<context:property-placeholder location="classpath:config.properties" />

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />

		<property name="filters" value="stat" />

		<property name="maxActive" value="20" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />

		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<array>
				<value>classpath:mapper/*.xml</value>
			</array>
		</property>
		<property name="typeAliasesPackage" value="com.momohelp.model" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							<!-- dialect=mysql reasonable=true supportMethodsArguments=true returnPageInfo=check 
								params=count=countSql -->
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.momohelp.mapper" />
		<!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
		<property name="markerInterface" value="com.momohelp.util.MyMapper" />
		<!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 <property name="properties"> 
			<value> mappers=tk.mybatis.mapper.common.Mapper </value> </property> -->
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- <aop:aspectj-autoproxy/> -->
	<aop:config>
		<aop:pointcut id="appService"
			expression="execution(public *  com.momohelp.calculate.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="appService" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>



	<!--配置调度程序quartz -->
	<!--方式一：使用JobDetailBean，任务类必须实现Job接口 -->
	<!-- <bean id="myjob" class="org.springframework.scheduling.quartz.JobDetailBean"> 
		<property name="name" value="exampleJob"></property> <property name="jobClass" 
		value="com.momohelp.calculate.quartz.AutomatchJob"></property> <property 
		name="jobDataAsMap"> <map> <entry key="service"> <value>simple is the beat</value> 
		</entry> </map> </property> </bean> -->
	<!-- 方式二：使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法 -->
	<!-- 定义目标bean和bean中的方法 -->
	<!-- <bean id="SpringQtzJob" class="com.momohelp.calculate.service.impl.DynamicCalculation" /> -->
	
	
	
	
	
	
	
	
	
	
	<bean id="baseQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="base" />
		</property>
		<property name="concurrent" value="false" />
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>base</value>
		</property>
	</bean>

	<!-- ======================== 调度触发器 ======================== -->
	<bean id="baseCronTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="baseQtzJobMethod"></property>
		<!--间隔5秒计算一次 -->
		<property name="cronExpression" value="0/5 * * * * ?"></property>
	</bean>
















	<bean id="conversionQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="conversion" />
		</property>
		<property name="concurrent" value="false" />
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>triggerConversion</value>
		</property>
	</bean>

	<!-- ======================== 调度触发器 ======================== -->
	<bean id="conversionCronTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="conversionQtzJobMethod"></property>
		<!-- 每天夜里1点执行一次 -->
		<!-- <property name="cronExpression" value="0 20 1 * * ?"></property> -->
		<property name="cronExpression" value="0/7 * * * * ?"></property>
	</bean>










	<bean id="forceLogoutQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="forceLogout" />
		</property>
		<property name="concurrent" value="false" />
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>calculateForceLogout</value>
		</property>
	</bean>

	<!-- ======================== 调度触发器 ======================== -->
	<bean id="forceLogoutCronTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="forceLogoutQtzJobMethod"></property>
		<!-- 每天夜里1点执行一次 -->
		<!-- <property name="cronExpression" value="0 0 1 * * ?"></property> -->
		<property name="cronExpression" value="0/9 * * * * ?"></property>
	</bean>












	<bean id="matchQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="match" />
		</property>
		<property name="concurrent" value="false" />
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>automatch</value>
		</property>
	</bean>

	<!-- ======================== 调度触发器 ======================== -->
	<bean id="matchCronTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="matchQtzJobMethod"></property>
		<!-- 每天8-20点 每一小时执行一次-->
		<!-- <property name="cronExpression" value="0 0 8-20 * * ?"></property> -->
		<property name="cronExpression" value="0/11 * * * * ?"></property>
	</bean>











	<bean id="myStaticQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="myStatic" />
		</property>
		<property name="concurrent" value="false" />
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>calculation</value>
		</property>
	</bean>

	<!-- ======================== 调度触发器 ======================== -->
	<bean id="myStaticCronTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="myStaticQtzJobMethod"></property>
		<!-- 每天夜里1点30分执行一次 -->
		<!-- <property name="cronExpression" value="0 30 1 * * ?"></property> -->
		<property name="cronExpression" value="0/13 * * * * ?"></property>
	</bean>







	<!-- ======================== 调度工厂 ======================== -->
	<!-- <bean id="SpringJobSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		lazy-init="false" init-method="start" destroy-method="stop">
		<property name="triggers">
			<list>
				<ref bean="baseCronTriggerBean"/>
				<ref bean="conversionCronTriggerBean"/>
				<ref bean="forceLogoutCronTriggerBean"/>
				<ref bean="matchCronTriggerBean" />
				<ref bean="myStaticCronTriggerBean"/>
			</list>
		</property>
		<property name="autoStartup" value="true" />
		<property name="schedulerName" value="cronScheduler" />
		<property name="startupDelay" value="1" />
	</bean> -->





	<!-- spring session -->
	<!-- <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration" 
		/> <bean id="redispoolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
		<property name="maxIdle" value="${redis.maxIdle}" /> <property name="maxTotal" 
		value="${redis.maxActive}" /> <property name="maxWaitMillis" value="${redis.maxWait}" 
		/> <property name="testOnBorrow" value="${redis.testOnBorrow}" /> </bean> 
		<bean id="redisconnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> 
		<property name="hostName" value="${redis.host}" /> <property name="port" 
		value="${redis.port}" /> <property name="password" value="${redis.pass}"></property> 
		<property name="poolConfig" ref="redispoolConfig"></property> </bean> 应用程序中使用redis的句柄 
		<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"> 
		<property name="connectionFactory" ref="redisconnectionFactory" /> </bean> 
		<task:annotation-driven scheduler="scheduler" /> <task:scheduler id="scheduler" 
		pool-size="50" /> -->
</beans>